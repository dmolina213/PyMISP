#!/usr/bin/env python
# -*- coding: utf-8 -*-
#import section
import datetime
import email.utils
import hashlib
import hmac
import json
import os
from pymisp import ExpandedPyMISP, MISPEvent, MISPObject
#from pymisp import PyMISP, MISPEvent, MISPObject
import requests
import sys
import threading
import time
import urllib.parse
import urllib3

# Read the config file.
import PySight_settings


def isight_search_indicators(base_url, public_key, private_key, hours):
    # Convert hours to seconds and subtract them from the current time
    since = int(time.time()) - hours * 60 * 60

    # Limit the returned data to that published since this Epoch datetime and the present time.
    # Therefore, add the 'since' parameter as a query string.
    params = {
        'since': since
    }
    search_query = '/view/indicators?' + urllib.parse.urlencode(params)

    # Retrieve indicators and warning data since the specified date and time.
    return isight_prepare_data_request(base_url, search_query, public_key, private_key)

####################################
 Search for FireEye iSight reports published since the specified last hours.
def isight_search_indicators(base_url, public_key, private_key, hours):
    # Convert hours to seconds and subtract them from the current time
    since = int(time.time()) - hours * 60 * 60

    # Limit the returned data to that published since this Epoch datetime and the present time.
    # Therefore, add the 'since' parameter as a query string.
    params = {
        'since': since
    }
    search_query = '/view/indicators?' + urllib.parse.urlencode(params)

    # Retrieve indicators and warning data since the specified date and time.
    return isight_prepare_data_request(base_url, search_query, public_key, private_key)

#########################

# Process all FireEye iSight reports and convert them to MISP events.
def misp_process_isight_indicators(a_result):
    """
    :param a_result:
    :type a_result:
    """

    # Process each indicator in the JSON message
    for indicator in a_result['message']:
        PySight_settings.logger.debug('Processing report %s', indicator['reportId'])

        if PySight_settings.use_threading:
            # Use threads to process the indicators
            # First, set the maximum number of threads
            thread_limiter = threading.BoundedSemaphore(value=PySight_settings.number_threads)
            # Define a thread
            t = threading.Thread(target=process_isight_indicator, args=(indicator,))
            # Start the thread
            t.start()
        else:
            # No threading
            process_isight_indicator(indicator)
            
###########main executable#########
f __name__ == '__main__':
    # If loglevel equals DEBUG, log the time the script ran.
    PySight_settings.logger.info('PySight2MISP started at %s', datetime.datetime.now(datetime.timezone.utc))
    if PySight_settings.debug_mode:
        # This is to log the time used to run the script
        from timeit import default_timer as timer
        start = timer()
    print("url:",PySight_settings.isight_url,"pubkey:", PySight_settings.isight_pub_key,"priv_key:",
                                      PySight_settings.isight_priv_key,"hours:" PySight_settings.isight_last_hours)
    # Retrieve FireEye iSight indicators of the last x hours.
    result = isight_search_indicators(PySight_settings.isight_url, PySight_settings.isight_pub_key,
                                      PySight_settings.isight_priv_key, PySight_settings.isight_last_hours)
    if result is False:
        PySight_settings.logger.warning('No indicators available from FireEye iSight')
    else:
        misp_process_isight_indicators(result)

    PySight_settings.logger.info('PySight2MISP finished at %s', datetime.datetime.now(datetime.timezone.utc))
    # If loglevel equals DEBUG, log the time the script ran.
    if PySight_settings.debug_mode:
        end = timer()
        PySight_settings.logger.debug('Time taken %s', end - start)

    # data_ioc(url, public_key, private_key)
    # data_text_search_simple(isight_url, public_key, private_key)
    # data_text_search_filter(isight_url, public_key, private_key)
    # data_text_search_title(url, public_key, private_key)
    # data_text_search_wildcard(url, public_key, private_key)
    # data_text_search_sensitive_reports(isight_url, public_key, private_key)
    # data_advanced_search_filter_indicators(url, public_key, private_key)
